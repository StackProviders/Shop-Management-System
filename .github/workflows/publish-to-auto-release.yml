name: 'publish'

on:
    push:
        tags:
            - 'v*'

# Builds app artifacts per platform, uploads them as artifacts (no local release),
# then creates a release in an external repository and uploads the artifacts there.

jobs:
    build:
        permissions:
            contents: read
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: 'macos-latest'
                      target: 'aarch64-apple-darwin'
                      artifact_suffix: 'macos-arm64'
                    - platform: 'macos-latest'
                      target: 'x86_64-apple-darwin'
                      artifact_suffix: 'macos-x64'
                    - platform: 'ubuntu-22.04'
                      target: ''
                      artifact_suffix: 'linux-x64'
                    - platform: 'windows-latest'
                      target: ''
                      artifact_suffix: 'windows-x64'

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v4

            - name: setup node
              uses: actions/setup-node@v4
              with:
                  node-version: lts/*

            - name: setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 8

            - name: install Rust stable
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-22.04'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

            - name: install frontend dependencies
              run: pnpm install

            - name: Get package version
              id: package-version
              shell: bash
              run: |
                  VERSION=$(node -p "require('./package.json').version")
                  echo "version=$VERSION" >> "$GITHUB_OUTPUT"

            - name: Build Tauri app
              env:
                  VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
                  VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
                  VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
                  VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
                  VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
                  VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
              run: |
                  pnpm build
                  if [ -n "${{ matrix.target }}" ]; then
                    pnpm tauri build --target ${{ matrix.target }}
                  else
                    pnpm tauri build
                  fi
              shell: bash

            - name: Collect artifacts
              shell: bash
              run: |
                  set -e
                  mkdir -p artifacts
                  echo "Scanning for installer files under src-tauri/target ..."
                  find src-tauri/target -type f \
                    \( -name "*.dmg" -o -name "*.app.tar.gz" -o -name "*.pkg" \
                       -name "*.msi" -o -name "*.exe" -o -name "*.nsis.*" \
                       -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \
                       -name "*.zip" -o -name "*.7z" \) \
                    -print -exec cp {} artifacts/ \;
                  echo "Collected files:" && ls -la artifacts || true

            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: tauri-bundles-${{ matrix.artifact_suffix }}-v${{ steps.package-version.outputs.version }}
                  path: artifacts/*
                  if-no-files-found: error

    publish-external:
        needs: build
        runs-on: ubuntu-22.04
        permissions:
            contents: read
        env:
            PUBLISH_REPO: StackProviders/Shop-Management-App-Publisher
        steps:
            - uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: ./dist

            - name: Get package version
              id: package-version
              shell: bash
              run: |
                  VERSION=$(node -p "require('./package.json').version")
                  echo "version=$VERSION" >> "$GITHUB_OUTPUT"

            - name: List downloaded artifacts
              run: |
                  ls -R

            - name: Create release in external repo and upload assets
              env:
                  GH_TOKEN: ${{ secrets.PUBLISHER_REPO_TOKEN }}
              run: |
                  TAG=v${{ steps.package-version.outputs.version }}
                  TITLE="App v${{ steps.package-version.outputs.version }}"
                  NOTES="See attached assets to download this version."
                  gh release create "$TAG" --repo "$PUBLISH_REPO" --title "$TITLE" --notes "$NOTES" || echo "Release may already exist; continuing to upload assets."
                  find ./dist -type f \( -name "*.dmg" -o -name "*.app.tar.gz" -o -name "*.msi" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.zip" -o -name "*.7z" \) -print0 | xargs -0 -I {} gh release upload "$TAG" "{}" --repo "$PUBLISH_REPO" --clobber
              shell: bash
