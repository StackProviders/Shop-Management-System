name: 'publish'

on:
    push:
        tags:
            - 'v*'

# Triggers on git tags starting with 'v' (e.g., v1.0.0)
# Creates a GitHub release, builds your app, and uploads the artifacts to the release.

jobs:
    publish-tauri:
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: 'macos-latest' # for Arm based macs (M1 and above).
                      args: '--target aarch64-apple-darwin'
                    - platform: 'macos-latest' # for Intel based macs.
                      args: '--target x86_64-apple-darwin'
                    - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
                      args: ''
                    - platform: 'windows-latest'
                      args: ''

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v4

            - name: setup node
              uses: actions/setup-node@v4
              with:
                  node-version: lts/*

            - name: setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 8

            - name: install Rust stable
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-22.04'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
              # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
              # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

            - name: install frontend dependencies
              run: pnpm install

            - name: Get package version
              id: package-version
              run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
              shell: bash

            - uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
                  VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
                  VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
                  VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
                  VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
                  VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
                  VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
                  VITE_GITHUB_TOKEN: ${{ secrets.VITE_GITHUB_TOKEN }}
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
                  NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
              with:
                  tagName: 'v${{ steps.package-version.outputs.version }}'
                  releaseName: 'App v${{ steps.package-version.outputs.version }}'
                  releaseBody: 'See the assets to download this version and install.'
                  releaseDraft: false
                  prerelease: false
                  args: ${{ matrix.args }}
                  includeUpdaterJson: true

    publish-android:
        name: Build and upload Android APK
        runs-on: ubuntu-22.04
        permissions:
            contents: write
        steps:
            - uses: actions/checkout@v4

            - name: setup node
              uses: actions/setup-node@v4
              with:
                  node-version: lts/*

            - name: setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 8

            - name: Install Rust stable
              uses: dtolnay/rust-toolchain@stable

            - name: Set up Java 17
              uses: actions/setup-java@v4
              with:
                  distribution: temurin
                  java-version: '17'

            - name: Set up Android SDK
              uses: android-actions/setup-android@v3

            - name: Install Android packages
              run: |
                  sdkmanager --install \
                    'platform-tools' \
                    'platforms;android-34' \
                    'build-tools;34.0.0' \
                    'ndk;26.1.10909125' \
                    'cmake;3.22.1'
                  yes | sdkmanager --licenses

            - name: Export Android env
              run: |
                  echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/26.1.10909125" >> $GITHUB_ENV
                  echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/26.1.10909125" >> $GITHUB_ENV

            - name: Install Rust Android targets
              run: |
                  rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android

            - name: Install frontend dependencies
              run: pnpm install

            - name: Initialize Tauri Android project (if missing)
              shell: bash
              run: |
                  if [ ! -d "src-tauri/gen/android" ]; then
                      pnpm tauri android init
                  fi

            - name: Configure Android signing
              shell: bash
              run: |
                  APP_DIR="src-tauri/gen/android/app"
                  mkdir -p "$APP_DIR"
                  PROPS_FILE="$APP_DIR/tauri.properties"

                  if [ -n "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ] && [ -n "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" ] && [ -n "${{ secrets.ANDROID_KEY_ALIAS }}" ] && [ -n "${{ secrets.ANDROID_KEY_PASSWORD }}" ]; then
                    echo "Using provided Android signing secrets"
                    echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > "$APP_DIR/upload.keystore"
                    {
                      echo "storeFile=$APP_DIR/upload.keystore"
                      echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
                      echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}"
                      echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}"
                    } > "$PROPS_FILE"
                    echo "Android signing configured with production keystore"
                  else
                    echo "No signing secrets provided. Generating a temporary debug keystore..."
                    keytool -genkeypair -v -keystore "$APP_DIR/debug.keystore" -storepass android -keypass android -alias upload -dname "CN=CI, OU=CI, O=CI, L=CI, S=CI, C=US" -keyalg RSA -keysize 2048 -validity 10000
                    {
                      echo "storeFile=$APP_DIR/debug.keystore"
                      echo "storePassword=android"
                      echo "keyAlias=upload"
                      echo "keyPassword=android"
                    } > "$PROPS_FILE"
                    echo "Android signing configured with debug keystore"
                  fi
                  
                  # Verify the signing configuration
                  echo "Signing configuration:"
                  cat "$PROPS_FILE"

            - name: Get package version
              id: package-version
              shell: bash
              run: |
                  echo "version=$(jq -r .version package.json)" >> "$GITHUB_OUTPUT"

            - name: Build Android APK (Tauri)
              run: pnpm tauri android build

            - name: Verify APK signing
              shell: bash
              run: |
                  echo "Checking APK files:"
                  find src-tauri/gen/android/app/build/outputs -name "*.apk" -type f
                  
                  # Check if APK is signed
                  APK_FILE=$(find src-tauri/gen/android/app/build/outputs -name "*.apk" -type f | head -1)
                  if [ -n "$APK_FILE" ]; then
                    echo "Found APK: $APK_FILE"
                    # Check if APK is signed (not unsigned)
                    if [[ "$APK_FILE" == *"unsigned"* ]]; then
                      echo "WARNING: APK is unsigned!"
                      exit 1
                    else
                      echo "APK appears to be signed successfully"
                      # Verify signature
                      jarsigner -verify -verbose -certs "$APK_FILE" || echo "Signature verification failed"
                    fi
                  else
                    echo "No APK file found!"
                    exit 1
                  fi

            - name: Rename APK files for release
              shell: bash
              run: |
                  OUTPUT_DIR="src-tauri/gen/android/app/build/outputs"
                  VERSION="${{ steps.package-version.outputs.version }}"
                  
                  # Find and rename APK files
                  find "$OUTPUT_DIR" -name "*.apk" -type f | while read apk_file; do
                    dir=$(dirname "$apk_file")
                    filename=$(basename "$apk_file")
                    
                    # Extract architecture from filename or directory
                    if [[ "$filename" == *"arm64"* ]] || [[ "$dir" == *"arm64"* ]]; then
                      new_name="Shop.Management.System_${VERSION}_arm64-v8a.apk"
                    elif [[ "$filename" == *"x86_64"* ]] || [[ "$dir" == *"x86_64"* ]]; then
                      new_name="Shop.Management.System_${VERSION}_x86_64.apk"
                    elif [[ "$filename" == *"universal"* ]]; then
                      new_name="Shop.Management.System_${VERSION}_universal.apk"
                    else
                      new_name="Shop.Management.System_${VERSION}.apk"
                    fi
                    
                    # Copy to a clean directory with proper naming
                    mkdir -p "dist-apk"
                    cp "$apk_file" "dist-apk/$new_name"
                    echo "Renamed: $filename -> $new_name"
                  done
                  
                  # List final APK files
                  echo "Final APK files:"
                  ls -la dist-apk/

            - name: Upload APK as artifact
              uses: actions/upload-artifact@v4
              with:
                  name: android-apk
                  path: dist-apk/*.apk

            # Release upload handled in a separate job to avoid race with desktop release creation

    attach-android-to-release:
        name: Attach Android APK to Release
        needs: [publish-tauri, publish-android]
        runs-on: ubuntu-22.04
        permissions:
            contents: write
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Get package version
              id: package-version
              shell: bash
              run: |
                  echo "version=$(jq -r .version package.json)" >> "$GITHUB_OUTPUT"

            - name: Download APK artifact
              uses: actions/download-artifact@v4
              with:
                  name: android-apk
                  path: dist-apk

            - name: Generate/merge latest.json with Android APK URLs
              shell: bash
              env:
                  GH_TOKEN: ${{ secrets.GH_TOKEN }}
              run: |
                  set -euo pipefail
                  VERSION="${{ steps.package-version.outputs.version }}"
                  REPO="$GITHUB_REPOSITORY"
                  BASE_URL="https://github.com/$REPO/releases/download/v$VERSION"

                  mkdir -p out
                  cd out

                  echo "Attempting to download existing latest.json from release v$VERSION"
                  if gh release view "v$VERSION" --repo "$REPO" --json assets | jq -e '.assets[] | select(.name == "latest.json")' >/dev/null 2>&1; then
                    gh release download "v$VERSION" --repo "$REPO" --pattern latest.json --output latest.json
                    echo "Downloaded existing latest.json"
                  else
                    echo "No existing latest.json found. Creating a new one."
                    NOW_ISO=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                    jq -n --arg v "$VERSION" \
                          --arg notes "See the assets to download this version and install." \
                          --arg pub "$NOW_ISO" \
                          '{version:$v, notes:$notes, pub_date:$pub, platforms:{}}' > latest.json
                  fi

                  echo "Collecting Android APKs from ../dist-apk"
                  ls -la ../dist-apk || true

                  # Prepare jq args for android entries
                  JQ_FILTER='.'

                  add_android_platform() {
                    local key="$1"; shift
                    local file="$1"; shift
                    local url="$BASE_URL/$file"
                    # We only set url. Signature for Android is not required by desktop updaters.
                    JQ_FILTER="\n$JQ_FILTER | .platforms[\"$key\"] = ({ url: \"$url\" })"
                  }

                  # Map APK filenames to platform keys
                  for apk in ../dist-apk/*.apk; do
                    [ -e "$apk" ] || continue
                    fname=$(basename "$apk")
                    case "$fname" in
                      *arm64*|*aarch64*) add_android_platform "android-aarch64" "$fname" ;;
                      *x86_64*)          add_android_platform "android-x86_64" "$fname" ;;
                      *universal*)       add_android_platform "android-universal" "$fname" ;;
                      *)                  add_android_platform "android" "$fname" ;;
                    esac
                  done

                  # Apply merge with jq
                  jq "$JQ_FILTER" latest.json > latest.merged.json
                  mv latest.merged.json latest.json
                  echo "Resulting latest.json:"
                  cat latest.json

                  cd -

            - name: Upload latest.json to GitHub Release (overwrite)
              uses: svenstaro/upload-release-action@v2
              with:
                  repo_token: ${{ secrets.GH_TOKEN }}
                  file: out/latest.json
                  asset_name: latest.json
                  tag: 'v${{ steps.package-version.outputs.version }}'
                  overwrite: true

            - name: Upload APK to GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: 'v${{ steps.package-version.outputs.version }}'
                  files: |
                      dist-apk/*.apk
              env:
                  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
